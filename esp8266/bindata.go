// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp8266

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\xbb\xb2\xe5\x36\xae\xcd\xef\x57\x9c\x3a\x71\x07\x78\xf1\xe5\x4c\x02\x89\xdf\x70\x75\x5d\x3b\xb4\xef\x2d\xbb\x27\x98\x9a\x9a\x7f\x9f\x5a\xa0\xa4\xbd\xbb\xed\x60\x4e\x20\x6e\x89\x24\x08\x02\x0b\x0b\xc0\xf9\xd7\xe7\xff\xfe\xdf\x2f\xbf\xfe\xfc\xe7\xb7\xaf\x7f\x7c\xfb\xfc\xe9\x83\xa9\x59\x1b\x64\x64\x5f\x3e\x72\xe6\xf3\xa7\x8f\x4f\xea\x44\x44\x95\x68\xff\xc8\x31\x96\x06\xf9\xfd\xbe\xe7\xd9\xf7\x18\xd1\x02\xbf\xf8\xfa\x5e\x39\x8e\x88\x96\x4f\xe1\xa8\x11\x23\x9f\x2c\xce\x41\xed\x68\xd5\x87\xf2\x1c\xc2\x4e\x42\x44\x47\x27\x19\x47\xa9\x2a\xde\xc2\xa9\xb2\xde\xa7\x76\x6a\x66\x47\xef\xbd\x9d\x83\x8a\x91\x50\x25\x21\xa1\x66\x1d\x53\x22\x4a\xd0\xbd\x3b\x49\x3b\x8c\xc4\x72\x8e\x9c\xec\xe4\x75\x46\x78\x25\x4b\x49\x9d\x74\x9f\xe5\x9d\x4e\x3e\x67\x9f\x83\x94\x4f\x33\x17\xeb\x29\x03\xe2\xda\xb0\x35\xb0\xd6\x7a\xda\xa5\x93\x54\xa9\x38\xa3\x53\xb1\x43\x44\x06\x15\xe1\xc5\x11\x5b\x5a\xef\x24\x7d\xeb\xe3\x15\x92\xca\xc9\x73\x45\x58\x3b\xcf\x11\x92\xbf\xbd\x2b\xcf\xfe\xdc\x75\x90\xc0\x0e\x4c\x34\xe3\xcd\x9a\x30\x5e\xeb\x5b\x17\x22\x3b\x30\x9e\x66\x03\xe3\xb6\x9b\x0f\xe1\x39\x98\xd7\x20\x9e\x93\x84\x86\x32\x6c\x71\xda\x9a\xa4\xea\xe2\xa5\xba\x50\xd3\xfc\xa6\xae\x5e\xaa\x09\x35\xe2\x28\xd0\x17\x7f\xea\xe6\xa5\x0e\xa1\xea\x93\xd6\x3a\xe6\xec\x95\x94\x60\x53\x37\x26\x0e\xbe\x57\x96\x7a\x08\x99\xcb\xf4\x20\x27\x99\x4e\xee\xd5\xfd\x58\x32\x79\x1d\x11\x70\x33\xf6\x29\x85\x95\x3a\x35\x66\xaf\x71\x46\x5e\x09\x5a\x45\x21\x5e\xfd\x96\xb6\xbc\xcb\x24\x77\x87\xac\xe5\xe4\x4d\xe7\x3a\xe5\x98\x6e\xdf\x9d\xbf\x9e\xf3\xa7\x9b\xbc\x9f\x5e\xea\xe9\xb1\x1c\xee\x27\xf5\xe2\xbd\xc2\x62\xea\x15\x12\xf2\x66\xcd\xa9\x2b\xe3\x98\xd9\x99\xbd\x0b\xaf\x4e\xfc\x9d\xad\xfb\x85\x5f\xdb\xa3\x18\xcc\x9e\xb0\xd9\xb8\xcd\x71\x00\x3f\x17\xae\xf7\x7d\x22\x28\x1e\x27\xe1\xd9\x47\xfa\xa9\x77\x7c\x37\xe0\x37\xc7\x41\x8b\x31\xaa\xed\x79\xf3\xed\xc7\x66\x7b\xbe\xd3\xb5\xee\x5a\x4f\x34\xd2\xbf\x43\x0e\x72\x1a\xc4\xec\xe4\x52\x59\x96\x4f\x12\x99\xc4\x8a\x37\x26\x3c\x63\xe2\x39\x17\x9e\x1e\x78\x9e\x86\x67\x25\x5e\xeb\xb6\x9a\x93\xa6\xef\x45\x4a\xad\x2a\x24\x22\x2c\x2c\xd7\x57\x95\x52\x4f\xe5\x20\x3e\xf5\xb1\xf3\x24\x51\x37\x29\x75\x4d\x5e\xc1\x5d\x10\xb3\xf3\x8c\x58\xdc\x29\x42\x0e\x89\x18\x24\x85\xe7\xc0\x4c\x8b\x88\x72\x94\x58\xc7\xca\x39\xe5\x89\x4f\x83\xca\x1a\x24\x73\xd0\xb2\x49\x41\x5e\xa4\x40\xbb\x46\x29\x6b\x9f\x25\x3c\xf5\x8e\x1c\xed\x24\x79\x3b\x51\x9e\x4f\x3c\xe9\x20\x11\x9e\x14\xa1\x72\x30\x5d\x31\x63\x58\x4b\x6a\x42\x6f\xab\xe4\xc0\xef\x5c\x7b\x61\x7b\xd2\x14\x27\x13\x71\x2e\x9d\xd8\x1f\xab\x48\xa7\x45\xde\x55\xa4\x32\x07\xe6\x5b\x87\x35\x79\xf5\x52\x13\x7d\xeb\x20\x2d\xb0\x55\x4b\x2b\x53\xae\x1c\x13\x31\x32\xa9\xf4\x6a\xc9\x48\x96\xeb\xd2\xa6\x35\x6d\x5f\x18\x78\xac\xb0\x7a\x14\x87\xbf\xb7\xc7\x34\x67\xcd\x29\x28\xac\x57\xbe\x42\x5c\xd3\x1b\x86\x27\x50\xa7\x0e\x0a\xd2\x08\x69\xa7\xb2\x4f\x1f\x91\xb2\x95\xb8\xbf\xc5\xa1\x0a\x5f\x7b\x84\xdb\x09\x8f\x98\xa5\x7c\xb2\x4a\x25\xef\x87\x59\x23\x6e\xe3\xb5\x6b\x0a\x45\x9e\x47\x2a\x53\x99\xf4\xba\x97\x30\xaf\x4b\x9a\x4c\x40\xab\xa9\x9d\xb2\x2d\x80\xf5\xdc\x73\xb6\x18\x28\x85\xe4\x90\x6d\xb5\xae\xb9\x62\xdb\x5f\x80\x4d\x32\x1e\x33\x62\xdb\xf4\xfa\xde\x69\x4a\x3b\x2d\xda\x96\x07\x49\x5c\xe1\xb9\x2d\xc9\x78\xf4\x08\xed\xb4\x72\x57\x05\xc2\x89\xc7\x71\x6b\x1d\x7b\x17\x0f\xbd\x56\x4d\x72\xe2\xd1\xbe\xe3\xa4\xf1\xa6\x6b\x03\x43\x30\x05\x95\xd4\xb5\x14\x60\x8e\x1b\xf1\x90\x57\x44\x3c\x9a\xc9\x94\xb8\xdf\x07\x4d\xe2\xfe\x1d\x42\xb6\x3d\x66\x3b\x85\xa4\xd7\x8d\x57\xe1\x08\x19\x98\x83\xdd\x36\x86\xd2\x6a\x89\x9e\x8d\xa4\x5e\x0a\xd3\x65\xd9\xed\x61\x4d\x19\x56\x4f\x44\x0c\x0e\xcc\xa8\xba\x63\xa0\x49\x44\xda\x58\x74\x3e\x08\x4f\x44\x3b\xd7\x4e\xdc\xe6\xb3\xf6\x75\xd3\xa1\x24\x10\x95\xb8\x14\x07\x94\x80\xf2\x5e\x6c\xee\x4b\x6e\x1e\x57\x2f\x62\x17\x47\x56\x24\xcb\x1b\x7a\xe0\x47\xb8\x9c\x25\x36\xdb\x38\x7e\xaf\x89\xe7\x5c\x78\x7a\xe0\x79\x8e\x83\xf9\xce\x4c\xb5\xef\xed\xe5\x1a\xdb\x25\xae\xd9\x35\xde\xdf\x9d\xaf\x7c\x7d\xf1\xa3\xdb\xb9\xf9\x4e\x3d\xf9\x8d\x63\xee\xec\xbf\x50\x1b\xc0\x9f\xa3\xf2\x1a\xc6\x31\x94\x69\x34\x9e\xa3\xf0\xe6\x3f\x3e\x6a\x95\x41\x55\x38\xc0\x15\x32\x99\x89\x0f\x11\xc4\xbc\x72\x48\xc0\x85\xc1\x87\x6a\x19\xa4\xca\x36\x23\x42\xaa\xf3\xb1\x26\x59\x71\x11\x6b\xa7\xc2\x1e\x8a\xfc\x94\x08\xb2\xe3\x65\xfd\x55\x22\x2c\x33\x98\x1c\x95\xf9\x30\xab\x83\xcc\xaa\xc8\x35\x6f\x11\x38\x0f\x69\x3d\x92\x50\x66\x3b\x57\x66\xdc\xa5\xbc\x28\xc2\x26\x4d\x9c\x2f\x9d\x54\x13\xc1\x4b\x5e\x08\x65\xa1\x31\x49\xa7\x10\x03\x3f\x60\xa8\xb8\x67\xb1\x13\x1a\xed\x5d\xfa\xf0\xa2\xf1\x2c\x11\xf3\xc0\xc9\x66\xd6\xb1\xb0\x62\xe0\x29\xfb\x5b\x15\xe4\xa6\x9a\x4c\xc9\x54\x6b\xa7\x2a\x52\x89\x6a\xd3\x60\x30\x28\xe1\xbb\x6a\x96\x23\x4a\x6e\x6a\x45\x17\x11\x78\x8a\x9b\x65\x45\x65\xec\xb8\x35\x80\x73\xdc\xe7\x08\x49\x38\x59\x53\xe9\x6c\x15\x35\xda\xc5\x27\xce\x87\x34\x0d\x6d\x95\x5d\x5e\xbb\x6a\x1e\x5d\x9b\xca\xd9\x85\xcf\x19\xa1\x93\xb0\x56\x88\xa5\xbe\xac\x7c\xe2\x2e\xa0\xb7\x9c\x39\x1f\x0b\x00\xa9\x3b\xe3\x17\xd7\x5d\xcc\x6d\xbb\xb9\xc9\xce\xe3\xc5\x8b\x0c\x3e\x5b\x44\x22\xb1\x37\xf6\x5e\x79\xf6\xc2\xab\x1b\x47\xd7\xcc\xe8\x92\x19\xfd\xbc\xf0\xe6\xd7\x38\x6f\xfc\x25\xd2\x06\xc7\xda\x48\x03\xba\x80\x36\x20\x0d\x88\xf3\x89\x14\x02\xb4\xad\x49\x32\x27\x99\x32\x59\xc4\x70\x10\xed\x41\xf5\xc2\x10\x81\xa1\x48\x38\x2e\x4c\x20\x4a\x77\xdd\x21\x59\x29\xdd\xb8\x14\x1e\x0e\x3c\x05\xaa\x8f\x20\x0e\x54\x2a\xdb\xb3\x15\x35\xb2\x24\x8a\x89\x63\xdc\xdf\x85\xd7\x88\x88\xcb\x76\xc0\x9a\x83\x33\xaa\xf0\xaa\x5b\x6e\xf4\xac\x00\x16\xb0\x92\x19\x95\xc7\x53\xc5\x75\x2f\x99\xff\xaa\x7a\xe5\xbe\xe5\xf5\x33\x7d\xc1\xe0\x26\x94\x17\x16\xc0\xde\x8a\xfb\xc4\xc3\xdb\xdc\x7a\xbc\x24\xae\xf3\xa5\xcf\xac\xc8\xb9\x19\x6d\x29\x81\x78\xf9\xdb\xac\xbe\xfb\xb3\x3f\x9a\xc4\xb1\x56\x64\x5d\x57\xea\xe1\x81\x2a\x17\x98\xe0\x76\x5c\xd6\x39\x14\xf1\xa1\x2f\x49\x3e\xde\x25\x35\x7f\x30\x33\xc9\x07\x7b\xff\x6f\xfc\x9e\xd4\x98\xfd\xc9\xae\xc9\xec\x7a\x8f\xd8\x15\xdb\xf6\x3f\xb0\x26\x83\x58\xef\x3e\x04\x55\xab\x54\xa6\x06\x4c\xdc\x99\x0c\xf9\xff\xe9\x0c\x54\xc8\x9d\xa9\x54\xf3\xdc\x51\xde\xab\x95\x8d\x03\x01\x0d\x21\x7f\x30\xa2\x6c\x67\xb0\xfa\x54\x53\xd0\x3b\x0b\xdd\x5e\xdf\xf4\xe5\xac\x21\x35\xfa\x5b\x3d\x8f\xeb\x1e\x4c\xe3\x84\x0d\x1c\xe1\xc5\x4c\xce\xda\x4b\xea\x95\xc9\xda\x50\xc2\x11\xec\xc4\xec\x62\xcc\x74\xd6\x9e\xd9\x49\x9c\x48\x53\x3f\xe4\x85\x23\x9b\x90\x83\xee\x68\xa2\x8b\x7b\x54\x0e\x9c\x5d\x60\x8c\x8a\x9d\xc0\x1a\xaa\xe6\xce\x6c\x05\xd9\xdb\xb3\x8a\x57\x67\xe0\xba\xfc\xed\x5e\xc7\xde\x43\x68\x49\x27\xce\x9d\x5d\xd8\xca\x91\x5c\x02\x9d\xbc\x32\xaa\x5c\x5c\xb6\x82\xe7\x61\x13\x78\xd8\x0a\xbe\xd7\x7a\xfe\xb0\xb7\x74\x65\x2b\x0e\x4f\x55\xe4\x02\xc4\x3c\xce\xc7\x6d\xfe\xe6\xfc\x7e\x9d\xef\xef\x32\xbc\x80\x89\xa9\xae\xf4\x77\xc6\x02\x5b\x5d\x33\x82\x4a\xa0\x22\xac\xeb\xea\x45\x20\x70\x3e\xd5\x94\x57\xf4\x24\x89\x8c\xd4\x1d\x16\x4f\xdb\x93\x15\x70\xe4\xb6\x35\x55\x6a\xb7\x25\xf7\x2c\xd6\x31\x9a\x09\x68\xf4\xf8\x44\xc5\x25\x0e\x25\xa5\x66\x67\x95\x64\x0c\x07\x87\xf6\x93\xbd\x1f\x89\x00\xfd\xa1\xcf\x03\x5a\x2d\xac\x1b\x03\x0b\xbb\xaf\xbe\xf1\xc1\x86\x1a\x48\x1f\xbd\x51\x9d\x25\x27\x92\xeb\xf3\x29\xfb\x0d\xce\x6a\xf4\xf4\xdd\x47\x94\xae\x39\x8a\x5b\xe6\x5b\x77\x59\xbb\xff\x40\x8e\xb0\x9b\xad\x32\x2a\xb2\x5d\x1d\x8d\x65\x30\x0b\xf8\x21\x19\x72\xe3\x19\x95\xca\xab\x57\x14\x30\x00\x72\xa5\x67\x35\x9e\x41\x67\xe6\x90\x0b\x14\x71\x95\x3b\xaa\x89\x83\xde\x76\xc1\xa7\xce\xfa\xaa\xdd\x0b\x97\x11\xeb\xc7\x0a\xde\x50\x5d\x21\xa7\x4a\x44\xe3\x22\xb1\x24\x4f\xa9\xa8\xfc\xc1\x3f\x4f\x3e\xf1\xce\xdc\x11\x25\xd9\x4f\x53\xe6\xe8\x57\x3e\x71\x52\x17\xf8\x6f\x33\xd5\x91\x2b\x1e\x7d\x5e\x68\x82\xa1\xb2\xe9\x2a\xb9\x7f\x66\xa7\x61\x58\x3d\x9f\xfa\xa0\xd6\xea\x1c\x76\x0a\x6b\xe6\xde\x9d\x93\x50\x20\xbf\x75\x22\x6d\x58\x14\x65\x8f\xf7\xae\x45\x67\x50\xbf\xeb\xad\x37\xc4\xdd\x4c\xf6\xce\x5e\xbb\x9f\x4f\x2e\xd2\xec\x8f\x6e\x3b\x5e\x2c\x77\xf7\xab\xd5\xf4\x7c\xf1\xc5\x1a\x3d\xf9\x02\xbc\x31\xc7\xe0\x48\x2f\x12\xeb\x40\x29\x8a\x9a\x8e\x92\xe3\x2e\x9b\x4d\x92\xd5\x86\x04\xba\xd9\xb9\xe7\x43\x0e\x9a\x67\xaf\x34\x6f\x84\x85\xbd\x6a\x4d\x43\x17\xd0\xd0\x48\x44\x1b\xc2\x8e\x5a\x13\x88\x58\x4f\xf6\x2e\xd8\xef\x19\xc3\x0d\x75\x4e\xbe\xcf\xfc\x5d\xee\x5e\xc4\x50\xdf\x74\xd8\x14\x5d\x90\x21\x09\x9d\x73\x22\x6e\xb5\x8d\xe9\xc5\xeb\x13\x0a\x4e\xd3\x2f\xbd\xd7\xc3\xa0\x0e\x9d\x2b\x22\x48\x26\x4d\x44\xd1\xec\x83\x57\xef\x1c\xbd\xfd\x25\xa2\x1a\xca\x46\x65\x5f\x02\x3b\xcd\xae\x3f\xfc\xbf\x64\x7b\x39\x90\x1b\xc9\xd8\x92\x54\x3b\x11\xaa\x4e\x64\xe3\x57\xe7\x28\xbb\x52\x8c\xfe\xf2\x9b\xe6\xff\x10\xde\xfd\xf1\xf9\xe5\xe3\xf3\xd7\xdf\xbf\xfd\xf1\xcf\xe7\x1f\x67\x62\xd2\xbf\x7c\x7c\xfe\xfe\x8f\xdf\x7e\xfe\xff\xaf\x7f\x7c\xfd\xed\x4f\xcc\x7c\xf9\xf8\xdc\x2f\x7f\xfd\x2f\x1b\x7d\xf9\xf8\xfc\xe5\xeb\xb7\xaf\x9f\x3f\x7d\x7c\xae\x42\x35\x73\x97\x52\xcb\xff\x42\x5c\xa3\x5d\x63\x95\x6b\x3c\xf7\xd8\xec\xfb\xf1\xf3\x92\xf5\x7e\x8a\xd6\x56\x95\xec\xdf\xff\xf3\x9f\x00\x00\x00\xff\xff\x53\x2b\x22\xe0\xe7\x13\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 5095, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
